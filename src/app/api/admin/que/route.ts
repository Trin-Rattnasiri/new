// src/app/api/admin/que/route.ts
import { NextResponse } from 'next/server';
import mysql from 'mysql2/promise';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const getConnection = async () => {
  return await mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
  });
};

// POST - ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
export async function POST(req: Request) {
  console.log('üöÄ POST request received at /api/admin/que');
  
  let connection;
  try {
    const body = await req.json();
    console.log('üìù Request body:', body);
    
    const {
      user_name,       // ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á column `name`
      department_id,
      slot_id,
      id_card_number,  // ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á column `hn`
      created_by,
      phone_number,    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ phone_number
    } = body;
    
    console.log('üìã Extracted data:', { 
      user_name, 
      department_id, 
      slot_id, 
      id_card_number, 
      created_by,
      phone_number // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô log
    });

    if (!user_name || !department_id || !slot_id) {
      return NextResponse.json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' }, { status: 400 });
    }

    connection = await getConnection();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á slot_date ‡∏î‡πâ‡∏ß‡∏¢
    const slotQuery = `
      SELECT available_seats, start_time, end_time, slot_date
      FROM slots
      WHERE id = ?
    `;
    const [slotResult] = await connection.query(slotQuery, [slot_id]);
    const slotData = (slotResult as mysql.RowDataPacket[])[0];

    if (!slotData || slotData.available_seats <= 0) {
      return NextResponse.json({ message: '‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß' }, { status: 400 });
    }

    const { available_seats, start_time, end_time, slot_date } = slotData;

    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç SQL INSERT - ‡πÄ‡∏û‡∏¥‡πà‡∏° phone_number
    const insertQuery = `
      INSERT INTO bookings (created_by, name, department_id, slot_id, hn, booking_date, status, phone_number)
      VALUES (?, ?, ?, ?, ?, ?, 'pending', ?)
    `;
    const [result] = await connection.query(insertQuery, [
      created_by || null,
      user_name,
      department_id,
      slot_id,
      id_card_number,
      slot_date,
      phone_number || null, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å phone_number
    ]);

    if ((result as mysql.ResultSetHeader).affectedRows > 0) {
      const bookingId = (result as mysql.ResultSetHeader).insertId;
      const bookingReferenceNumber = `${slot_date.toISOString().slice(0, 10).replace(/-/g, '')}-${String(bookingId).padStart(5, '0')}`;

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï booking_reference_number
      const updateQuery = `
        UPDATE bookings 
        SET booking_reference_number = ?
        WHERE id = ?
      `;
      await connection.query(updateQuery, [bookingReferenceNumber, bookingId]);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á
      const updateSeatsQuery = `
        UPDATE slots
        SET available_seats = available_seats - 1
        WHERE id = ?
      `;
      await connection.query(updateSeatsQuery, [slot_id]);

      // ===== ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à =====
      let lineNotificationStatus = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á';
      
      try {
        console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE...');
        console.log('created_by (citizenId):', created_by);
        console.log('user_name:', user_name);
        console.log('phone_number:', phone_number); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° log phone_number
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
        if (!created_by) {
          console.log('‚ùå created_by ‡πÄ‡∏õ‡πá‡∏ô null ‡∏´‡∏£‡∏∑‡∏≠ undefined');
          lineNotificationStatus = '‡πÑ‡∏°‡πà‡∏°‡∏µ citizenId';
        } else {
          // ‡πÉ‡∏ä‡πâ created_by (citizenId) ‡πÅ‡∏ó‡∏ô user_name ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤ LINE ID
          console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô database...');
          const [userRows]: [any[], any] = await connection.query(
            "SELECT line_id, citizenId FROM user WHERE citizenId = ?",
            [created_by]
          );
          
          console.log('üîç SQL Query executed');
          console.log('üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:', userRows.length);
          console.log('üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user:', userRows);
          
          const user = userRows[0];

          if (!user) {
            console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö');
            console.log('‚ùå ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ citizenId:', created_by);
            lineNotificationStatus = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';
          } else if (!user.line_id) {
            console.log('‚ùå ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö LINE');
            console.log('‚ùå citizenId:', user.citizenId, 'line_id:', user.line_id);
            lineNotificationStatus = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ LINE';
          } else {
            console.log('‚úÖ ‡∏û‡∏ö LINE ID:', user.line_id);
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö BASE_URL
            console.log('üîç BASE_URL:', process.env.NEXT_PUBLIC_BASE_URL);
            
            if (!process.env.NEXT_PUBLIC_BASE_URL) {
              console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö NEXT_PUBLIC_BASE_URL');
              lineNotificationStatus = '‡πÑ‡∏°‡πà‡∏û‡∏ö BASE_URL';
            } else {
              // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
              console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á...');
              const [bookingRows]: [any[], any] = await connection.query(`
                SELECT 
                  b.*, 
                  d.name as department_name,
                  s.start_time,
                  s.end_time,
                  s.slot_date
                FROM bookings b
                LEFT JOIN departments d ON b.department_id = d.id
                LEFT JOIN slots s ON b.slot_id = s.id
                WHERE b.booking_reference_number = ?
              `, [bookingReferenceNumber]);
              
              console.log('üîç ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:', bookingRows.length);
              const booking = bookingRows[0];
              console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á:', booking);

              if (booking) {
                // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                const appointmentDetails = {
                  referenceNumber: booking.booking_reference_number,
                  department: booking.department_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏ú‡∏ô‡∏Å',
                  date: booking.slot_date ? new Date(booking.slot_date).toLocaleDateString('th-TH') : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                  time: booking.start_time && booking.end_time ? `${booking.start_time} - ${booking.end_time}` : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ß‡∏•‡∏≤'
                };

                console.log('üì§ ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ LINE:', appointmentDetails);
                console.log('üì§ LINE User ID:', user.line_id);

                // ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE
                const lineApiUrl = `${process.env.NEXT_PUBLIC_BASE_URL}/api/line/notification`;
                console.log('üì§ LINE API URL:', lineApiUrl);
                
                const lineResponse = await fetch(lineApiUrl, {
                  method: "POST",
                  headers: { 
                    "Content-Type": "application/json"
                  },
                  body: JSON.stringify({
                    userId: user.line_id,
                    appointmentDetails
                  }),
                });

                const lineResult = await lineResponse.text();
                console.log('üì§ LINE API Response Status:', lineResponse.status);
                console.log('üì§ LINE API Response Headers:', Object.fromEntries(lineResponse.headers.entries()));
                console.log('üì§ LINE API Response Body:', lineResult);

                if (lineResponse.ok) {
                  console.log('‚úÖ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                  lineNotificationStatus = '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
                } else {
                  console.log('‚ùå ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
                  console.log('‚ùå Status:', lineResponse.status);
                  console.log('‚ùå Response:', lineResult);
                  lineNotificationStatus = `‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${lineResponse.status} - ${lineResult}`;
                }
              } else {
                console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á');
                console.log('‚ùå Booking Reference:', bookingReferenceNumber);
                lineNotificationStatus = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á';
              }
            }
          }
        }
      } catch (lineError) {
        console.error("‚ùå Error ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ LINE:", lineError);
        console.error("‚ùå Error Stack:", lineError.stack);
        console.error("‚ùå Error Name:", lineError.name);
        console.error("‚ùå Error Message:", lineError.message);
        lineNotificationStatus = `Error: ${lineError.message}`;
      }

      const timeSlotMessage = `${start_time}-${end_time} (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á: ${available_seats - 1})`;

      return NextResponse.json({
        message: '‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        bookingReferenceNumber,
        bookingDate: slot_date,
        timeSlot: timeSlotMessage,
        id: bookingId,
        phoneNumber: phone_number, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô response
        lineNotificationStatus: lineNotificationStatus
      }, { status: 201 });
    } else {
      return NextResponse.json({ message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡πÑ‡∏î‡πâ' }, { status: 400 });
    }
  } catch (error) {
    console.error('Error booking queue:', error);
    return NextResponse.json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß' }, { status: 500 });
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}