// /app/api/line-notification/route.ts
import { NextResponse } from 'next/server'
import { Client } from '@line/bot-sdk'

// ‚è±Ô∏è ‡∏à‡∏±‡∏î‡πÇ‡∏ã‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ + ‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
import dayjs from 'dayjs'
import utc from 'dayjs/plugin/utc'
import tz from 'dayjs/plugin/timezone'
import 'dayjs/locale/th'
dayjs.extend(utc)
dayjs.extend(tz)
dayjs.locale('th')

// ===== helpers =====
function getEnvOrThrow(key: string) {
  const value = process.env[key]
  console.log(`Environment variable ${key}:`, value ? 'SET' : 'NOT SET')
  if (!value) throw new Error(`Environment variable ${key} is not set`)
  return value
}
function normalizeStatus(s?: string) {
  const v = (s || '').trim().toLowerCase()
  if (v === 'canceled' || v === 'cancel') return 'cancelled'
  return v
}
function getStatusText(status: string) {
  const statusMap: Record<string, string> = {
    pending: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô',
    confirmed: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
    approved: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    rejected: '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò',
    cancelled: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß',
    completed: '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
    'no-show': '‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡∏î',
  }
  return statusMap[status] || status
}
function getStatusColor(status: string) {
  const colorMap: Record<string, string> = {
    pending: '#ff9500',
    confirmed: '#34c759',
    approved: '#34c759',
    rejected: '#ff3b30',
    cancelled: '#ff3b30',
    completed: '#007aff',
    'no-show': '#ff6b6b',
  }
  return colorMap[status] || '#8e8e93'
}
// ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö ISO/UTC ‡πÅ‡∏•‡∏∞ DATE ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤)
function toThaiDateText(input?: string) {
  if (!input) return '-'
  const d = /T|Z/.test(input) ? dayjs.utc(input).tz('Asia/Bangkok') : dayjs(input)
  return d.isValid() ? d.format('D MMM YYYY') : input
}
// ‡∏ó‡∏≥‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á ‡πÄ‡∏ä‡πà‡∏ô "08:00:00-09:00:00" -> "08:00-09:00"
function toTimeRangeText(input?: string) {
  if (!input) return '-'
  const trim = (t: string) => (t?.length >= 5 ? t.slice(0, 5) : t)
  if (input.includes('-')) {
    const [a, b] = input.split('-')
    return `${trim(a)}-${trim(b)}`
  }
  return trim(input)
}

export async function POST(request: Request) {
  console.log('üöÄ LINE Notification API called')
  try {
    // ENV
    const lineConfig = {
      channelAccessToken: getEnvOrThrow('LINE_CHANNEL_ACCESS_TOKEN'),
      channelSecret: getEnvOrThrow('LINE_CHANNEL_SECRET'),
    }
    const client = new Client(lineConfig)

    // Body
    const data = await request.json()
    console.log('üì• Request data:', JSON.stringify(data, null, 2))
    const { userId, appointmentDetails, statusUpdateDetails } = data

    if (!userId || (!appointmentDetails && !statusUpdateDetails)) {
      return NextResponse.json({ success: false, message: 'Missing required data' }, { status: 400 })
    }

    // BASE_URL (fallback ‡∏à‡∏≤‡∏Å URL ‡πÄ‡∏≠‡∏á)
    let baseUrl =
      process.env.NEXT_PUBLIC_BASE_URL ||
      (typeof request === 'object' && (request as any).url ? new URL((request as any).url).origin : '')
    if (baseUrl.endsWith('/')) baseUrl = baseUrl.slice(0, -1)

    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• + ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏Å‡∏£‡∏ì‡∏µ
    let messageType: 'appointment' | 'status_update' = 'appointment'
    let messageData: any

    if (statusUpdateDetails) {
      messageType = 'status_update'
      messageData = {
        referenceNumber: statusUpdateDetails.referenceNumber,
        department: statusUpdateDetails.department,
        date: toThaiDateText(statusUpdateDetails.date),
        time: toTimeRangeText(statusUpdateDetails.time),
        status: normalizeStatus(statusUpdateDetails.newStatus),
        oldStatus: normalizeStatus(statusUpdateDetails.oldStatus),
        statusMessage: statusUpdateDetails.statusMessage,
        adminNote: statusUpdateDetails.adminNote,
      }
    } else {
      messageData = {
        ...appointmentDetails,
        date: toThaiDateText(appointmentDetails?.date),
        time: toTimeRangeText(appointmentDetails?.time),
        status: normalizeStatus(appointmentDetails?.status),
      }
    }

    const bookingStatus = messageData.status || 'pending'
    const statusText = getStatusText(bookingStatus)
    const statusColor = getStatusColor(bookingStatus)

    // Flex Message
    let flexMessage: any
    if (messageType === 'status_update') {
      flexMessage = {
        type: 'flex',
        altText: `üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${messageData.referenceNumber} - ${statusText}`,
        contents: {
          type: 'bubble',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              { type: 'text', text: 'üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢', weight: 'bold', size: 'lg', color: '#ffffff' },
              { type: 'text', text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï', size: 'sm', color: '#ffffff', margin: 'sm' },
            ],
            backgroundColor: statusColor,
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'box',
                layout: 'vertical',
                contents: [
                  { type: 'text', text: '‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', weight: 'bold', size: 'sm', color: '#666666' },
                  {
                    type: 'box',
                    layout: 'horizontal',
                    contents: [
                      {
                        type: 'text',
                        text: getStatusText(messageData.oldStatus),
                        size: 'sm',
                        color: '#999999',
                        decoration: 'line-through',
                        flex: 1,
                      },
                      { type: 'text', text: '‚ûú', size: 'sm', color: '#666666', align: 'center' },
                      {
                        type: 'text',
                        text: statusText,
                        size: 'sm',
                        weight: 'bold',
                        color: statusColor,
                        flex: 1,
                        align: 'end',
                      },
                    ],
                    margin: 'sm',
                  },
                ],
                backgroundColor: '#f8fafc',
                paddingAll: '15px',
                cornerRadius: '8px',
                margin: 'lg',
              },
              { type: 'separator', margin: 'lg' },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.referenceNumber,
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    color: '#f59e0b',
                  },
                ],
                margin: 'lg',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡πÅ‡∏ú‡∏ô‡∏Å', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.department,
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    wrap: true,
                  },
                ],
                margin: 'md',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.date, // ‚úÖ ‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    wrap: true,
                  },
                ],
                margin: 'md',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡πÄ‡∏ß‡∏•‡∏≤', color: '#666666', size: 'sm', flex: 2 },
                  { type: 'text', text: messageData.time, weight: 'bold', size: 'sm', flex: 3, align: 'end' },
                ],
                margin: 'md',
              },
            ],
            paddingAll: '20px',
          },
        },
      }
    } else {
      flexMessage = {
        type: 'flex',
        altText: `‡πÉ‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ${messageData.department} - ${messageData.date}`,
        contents: {
          type: 'bubble',
          header: {
            type: 'box',
            layout: 'vertical',
            contents: [
              { type: 'text', text: '‡πÉ‡∏ö‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢', weight: 'bold', size: 'xl', color: '#ffffff' },
              { type: 'text', text: '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì', size: 'sm', color: '#ffffff', margin: 'sm' },
            ],
            backgroundColor: '#2563eb',
            paddingAll: '20px',
          },
          body: {
            type: 'box',
            layout: 'vertical',
            contents: [
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: statusText,
                    weight: 'bold',
                    color: statusColor,
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                  },
                ],
                margin: 'lg',
              },
              { type: 'separator', margin: 'lg' },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡πÅ‡∏ú‡∏ô‡∏Å', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.department,
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    wrap: true,
                  },
                ],
                margin: 'lg',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.date, // ‚úÖ ‡πÑ‡∏ó‡∏¢‡πÄ‡∏™‡∏°‡∏≠
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    wrap: true,
                  },
                ],
                margin: 'md',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡πÄ‡∏ß‡∏•‡∏≤', color: '#666666', size: 'sm', flex: 2 },
                  { type: 'text', text: messageData.time, weight: 'bold', size: 'sm', flex: 3, align: 'end' },
                ],
                margin: 'md',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'text', text: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç', color: '#666666', size: 'sm', flex: 2 },
                  {
                    type: 'text',
                    text: messageData.referenceNumber,
                    weight: 'bold',
                    size: 'sm',
                    flex: 3,
                    align: 'end',
                    color: '#f59e0b',
                  },
                ],
                margin: 'md',
              },
              { type: 'separator', margin: 'lg' },
              {
                type: 'box',
                layout: 'vertical',
                contents: [
                  { type: 'text', text: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç', weight: 'bold', size: 'sm', color: '#6366f1' },
                  {
                    type: 'text',
                    text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î 15-30 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢',
                    size: 'xs',
                    color: '#64748b',
                    wrap: true,
                    margin: 'sm',
                  },
                ],
                backgroundColor: '#f8fafc',
                paddingAll: '15px',
                cornerRadius: '8px',
                margin: 'lg',
              },
            ],
            paddingAll: '20px',
          },
          footer: {
            type: 'box',
            layout: 'vertical',
            spacing: 'sm',
            contents: [
              {
                type: 'button',
                style: 'primary',
                height: 'sm',
                action: { type: 'uri', label: '‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°', uri: `${baseUrl}/appointment/${messageData.referenceNumber}` },
                color: '#2563eb',
              },
              {
                type: 'box',
                layout: 'horizontal',
                contents: [
                  { type: 'button', style: 'secondary', height: 'sm', action: { type: 'uri', label: '‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà', uri: 'tel:053771056' }, color: '#64748b', flex: 1 },
                  { type: 'button', style: 'secondary', height: 'sm', action: { type: 'uri', label: '‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà', uri: 'https://maps.app.goo.gl/p1Zr7jQ8ziWZxNvv9?g_st=ipc' }, color: '#64748b', flex: 1 },
                ],
                spacing: 'sm',
              },
            ],
            paddingAll: '20px',
          },
        },
      }
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
    await client.pushMessage(userId, flexMessage)
    return NextResponse.json({ success: true, message: 'Notification sent to LINE' })
  } catch (error: any) {
    console.error('üí• Error details:', { message: error.message, stack: error.stack, name: error.name })
    return NextResponse.json({ success: false, message: 'Failed to send notification', error: error.message }, { status: 500 })
  }
}
