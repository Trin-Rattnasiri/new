import { NextResponse } from "next/server";
import mysql from "mysql2/promise";
import bcrypt from "bcryptjs";


// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
const pool = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "",
  database: "hospital_booking", 
  waitForConnections: true,
  connectionLimit: 10,
});

// ‚úÖ POST: ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
export async function POST(req: Request) {
  try {
    const { citizenId, password } = await req.json();
    console.log("üìå Data received from frontend:", { citizenId, password });

    if (!citizenId || !password) {
      console.error("‚ùå Missing required fields");
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" }, { status: 400 });
    }

    const connection = await pool.getConnection();
    console.log("üîç Checking user in database...");
    
    const [rows] = await connection.execute(
      "SELECT * FROM user WHERE citizenId = ?",
      [citizenId]
    );

    connection.release();

    const users = rows as any[];
    if (users.length === 0) {
      console.error("‚ùå User not found!");
      return NextResponse.json({ error: "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 404 });
    }

    const user = users[0];
    console.log("üîê Checking password...");

    const passwordMatch = await bcrypt.compare(password, user.password);
    if (!passwordMatch) {
      console.error("‚ùå Incorrect password!");
      return NextResponse.json({ error: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" }, { status: 401 });
    }

    console.log("‚úÖ Login successful!");
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° citizenId ‡πÉ‡∏ô response ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ frontend ‡πÉ‡∏ä‡πâ
    return NextResponse.json({ 
      message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", 
      citizenId: user.citizenId 
    }, { status: 200 });

  } catch (error) {
    console.error("üö® Login Error:", error);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 500 });
  }
}

