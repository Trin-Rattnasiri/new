import { NextResponse } from "next/server";
import mysql from "mysql2/promise";
import bcrypt from "bcrypt";

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MySQL
const pool = mysql.createPool({
  host: "localhost",
  user: "root",
  password: "",
  database: "hospital_booking",
  waitForConnections: true,
  connectionLimit: 10,
});

// ‚úÖ POST: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
export async function POST(req: Request) {
  try {
    const body = await req.json();
    console.log("üìå Data received from frontend:", body);

    const { citizenId, phoneNumber, password, name, birthday, prefix } = body;

    if (!citizenId || !phoneNumber || !password || !name || !birthday || !prefix) {
      console.error("‚ùå Missing required fields");
      return NextResponse.json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" }, { status: 400 });
    }

    const connection = await pool.getConnection();

    // üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const [existingUser] = await connection.execute(
      "SELECT * FROM user WHERE citizenId = ?",
      [citizenId]
    );

    if ((existingUser as any[]).length > 0) {
      connection.release();
      return NextResponse.json({ error: "‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß!" }, { status: 400 });
    }

    // üîê Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    const hashedPassword = await bcrypt.hash(password, 10);

    // üî¢ ‡∏î‡∏∂‡∏á HN ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const [hnResult] = await connection.execute(
      "SELECT hn FROM user WHERE hn IS NOT NULL ORDER BY id DESC LIMIT 1"
    );

    let nextHNNumber = 1;
    if ((hnResult as any[]).length > 0) {
      const lastHN = (hnResult as any[])[0].hn; // ‡πÄ‡∏ä‡πà‡∏ô "HN00000005"
      const lastNumber = parseInt(lastHN.replace("HN", ""));
      nextHNNumber = lastNumber + 1;
    }

    const newHN = `HN${String(nextHNNumber).padStart(8, "0")}`;

    // üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á MySQL ‡∏û‡∏£‡πâ‡∏≠‡∏° HN
    await connection.execute(
      `INSERT INTO user (citizenId, phone, password, name, birthday, prefix, hn, createdAt) 
       VALUES (?, ?, ?, ?, ?, ?, ?, NOW())`,
      [citizenId, phoneNumber, hashedPassword, name, birthday, prefix, newHN]
    );

    connection.release();
    return NextResponse.json({ message: "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", hn: newHN }, { status: 201 });
  } catch (error) {
    console.error("üö® Signup Error:", error);
    return NextResponse.json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£" }, { status: 500 });
  }
}
