import { type NextRequest, NextResponse } from "next/server"
import mysql from "mysql2/promise"

const pool = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
})

// Helper function for error responses
const createErrorResponse = (message: string, status: number = 500, details?: any) => {
  console.error(`‚ùå Error (${status}):`, message, details ? details : '')
  return NextResponse.json({ 
    error: message, 
    ...(details && { details }) 
  }, { status })
}

// GET handler to fetch appointment details
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ booking_reference_number: string }> }
) {
  let connection;
  
  try {
    connection = await pool.getConnection()
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ params resolve ‡∏Å‡πà‡∏≠‡∏ô
    const resolvedParams = await params
    const bookingReferenceNumber = resolvedParams.booking_reference_number

    // Validate booking reference number format
    if (!bookingReferenceNumber || !bookingReferenceNumber.match(/^\d{8}-\d{5}$/)) {
      return createErrorResponse("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 400)
    }

    console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:', bookingReferenceNumber)

    const [rows] = await connection.query(
      `SELECT 
        b.id,
        b.name,
        b.hn,
        b.phone_number,
        b.created_by,
        b.status,
        b.cancelled_by AS cancelledBy,
        b.booking_reference_number,
        b.booking_date,
        d.name AS department_name,
        s.slot_date,
        s.start_time,
        s.end_time
      FROM bookings b
      JOIN departments d ON b.department_id = d.id
      JOIN slots s ON b.slot_id = s.id
      WHERE b.booking_reference_number = ?`,
      [bookingReferenceNumber],
    )

    console.log('üîç ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', Array.isArray(rows) ? `‡∏û‡∏ö ${rows.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£` : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')

    if (!rows || (rows as any[]).length === 0) {
      return createErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", 404)
    }

    const appointment = (rows as any[])[0]
    console.log('‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢ ID:', appointment.id)
    
    return NextResponse.json(appointment)
    
  } catch (error: any) {
    return createErrorResponse(
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
      500, 
      error.message
    )
  } finally {
    if (connection) connection.release()
  }
}

// PUT handler to update appointment status
export async function PUT(
  request: NextRequest, 
  { params }: { params: Promise<{ booking_reference_number: string }> }
) {
  let connection;
  
  try {
    connection = await pool.getConnection()
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ params resolve ‡∏Å‡πà‡∏≠‡∏ô
    const resolvedParams = await params
    const bookingReferenceNumber = resolvedParams.booking_reference_number
    
    let requestData;
    try {
      requestData = await request.json()
    } catch (jsonError) {
      return createErrorResponse("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 400)
    }
    
    const { status, cancelledBy } = requestData

    // Validate required fields
    if (!status) {
      return createErrorResponse("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", 400)
    }

    // Validate status values
    const validStatuses = ['pending', 'confirmed', 'cancelled', 'completed']
    if (!validStatuses.includes(status)) {
      return createErrorResponse(`‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô: ${validStatuses.join(', ')}`, 400)
    }

    // Validate booking reference number format
    if (!bookingReferenceNumber || !bookingReferenceNumber.match(/^\d{8}-\d{5}$/)) {
      return createErrorResponse("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 400)
    }

    console.log('üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:', bookingReferenceNumber, '‡πÄ‡∏õ‡πá‡∏ô:', status)

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connection.beginTransaction()

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [bookingRows] = await connection.query(
        "SELECT id, status, slot_id FROM bookings WHERE booking_reference_number = ?",
        [bookingReferenceNumber],
      )

      if (!bookingRows || (bookingRows as any[]).length === 0) {
        await connection.rollback()
        return createErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", 404)
      }

      const booking = (bookingRows as any[])[0]
      console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:', { id: booking.id, status: booking.status })

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (booking.status === status) {
        await connection.rollback()
        return NextResponse.json({ 
          message: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á",
          current_status: status 
        })
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
      const [updateResult] = await connection.query(
        "UPDATE bookings SET status = ?, cancelled_by = ? WHERE booking_reference_number = ?", 
        [status, cancelledBy || null, bookingReferenceNumber]
      )

      const affectedRows = (updateResult as any).affectedRows
      console.log('üîÑ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó:', affectedRows)

      if (affectedRows === 0) {
        await connection.rollback()
        return createErrorResponse("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", 500)
      }

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (booking.status !== "cancelled" && status === "cancelled") {
        console.log('üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà slot:', booking.slot_id)
        
        const [slotUpdateResult] = await connection.query(
          "UPDATE slots SET available_seats = available_seats + 1 WHERE id = ?", 
          [booking.slot_id]
        )
        
        const slotAffectedRows = (slotUpdateResult as any).affectedRows
        console.log('üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó slot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', slotAffectedRows, '‡πÅ‡∏ñ‡∏ß')
      }
      
      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á
      else if (booking.status === "cancelled" && status !== "cancelled") {
        console.log('üîÑ ‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å slot:', booking.slot_id)
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô
        const [slotCheckRows] = await connection.query(
          "SELECT available_seats FROM slots WHERE id = ?", 
          [booking.slot_id]
        )
        
        if (!slotCheckRows || (slotCheckRows as any[]).length === 0) {
          await connection.rollback()
          return createErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤", 404)
        }
        
        const availableSeats = (slotCheckRows as any[])[0].available_seats
        if (availableSeats <= 0) {
          await connection.rollback()
          return createErrorResponse("‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ", 400)
        }
        
        const [slotUpdateResult] = await connection.query(
          "UPDATE slots SET available_seats = available_seats - 1 WHERE id = ?", 
          [booking.slot_id]
        )
        
        console.log('üîÑ ‡∏•‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')
      }

      // commit transaction
      await connection.commit()
      console.log('‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

      return NextResponse.json({ 
        message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        booking_reference_number: bookingReferenceNumber,
        new_status: status,
        previous_status: booking.status
      })
      
    } catch (error) {
      await connection.rollback()
      throw error
    }
    
  } catch (error: any) {
    return createErrorResponse(
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
      500, 
      error.message
    )
  } finally {
    if (connection) connection.release()
  }
}

// DELETE handler to remove appointment
export async function DELETE(
  request: NextRequest, 
  { params }: { params: Promise<{ booking_reference_number: string }> }
) {
  let connection;
  
  try {
    connection = await pool.getConnection()
    
    // ‡∏£‡∏≠‡πÉ‡∏´‡πâ params resolve ‡∏Å‡πà‡∏≠‡∏ô
    const resolvedParams = await params
    const bookingReferenceNumber = resolvedParams.booking_reference_number

    // Validate booking reference number format
    if (!bookingReferenceNumber || !bookingReferenceNumber.match(/^\d{8}-\d{5}$/)) {
      return createErrorResponse("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", 400)
    }

    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢:', bookingReferenceNumber)

    // ‡πÄ‡∏£‡∏¥‡πà‡∏° transaction
    await connection.beginTransaction()

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const [bookingRows] = await connection.query(
        "SELECT id, status, slot_id, name FROM bookings WHERE booking_reference_number = ?",
        [bookingReferenceNumber],
      )

      if (!bookingRows || (bookingRows as any[]).length === 0) {
        await connection.rollback()
        return createErrorResponse("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢", 404)
      }

      const booking = (bookingRows as any[])[0]
      console.log('üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö:', { 
        id: booking.id, 
        name: booking.name, 
        status: booking.status 
      })

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      if (booking.status !== "cancelled") {
        console.log('üîÑ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà slot:', booking.slot_id)
        
        const [slotUpdateResult] = await connection.query(
          "UPDATE slots SET available_seats = available_seats + 1 WHERE id = ?", 
          [booking.slot_id]
        )
        
        const slotAffectedRows = (slotUpdateResult as any).affectedRows
        console.log('üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó slot ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', slotAffectedRows, '‡πÅ‡∏ñ‡∏ß')
      }

      // ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
      const [deleteResult] = await connection.query(
        "DELETE FROM bookings WHERE booking_reference_number = ?", 
        [bookingReferenceNumber]
      )

      const affectedRows = (deleteResult as any).affectedRows
      console.log('üóëÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏•‡∏ö:', affectedRows)

      if (affectedRows === 0) {
        await connection.rollback()
        return createErrorResponse("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ", 500)
      }

      // commit transaction
      await connection.commit()
      console.log('‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

      return NextResponse.json({ 
        message: "‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
        deleted_booking_reference_number: bookingReferenceNumber,
        deleted_booking_name: booking.name
      })
      
    } catch (error) {
      await connection.rollback()
      throw error
    }
    
  } catch (error: any) {
    return createErrorResponse(
      "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", 
      500, 
      error.message
    )
  } finally {
    if (connection) connection.release()
  }
}