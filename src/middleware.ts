// middleware.ts  
import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"
import { jwtVerify } from "jose"

const PUBLIC_PATHS = new Set<string>([
  "/",                       //  ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å  Login
  "/front/user-signup",      // ‡∏´‡∏ô‡πâ‡∏≤ signup
  "/401",                    // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏´‡∏ô‡πâ‡∏≤ 401 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô public
])

const PUBLIC_API_PREFIXES = [
  "/api/user/login",
  "/api/consent/log", 
  "/api/line-webhook",
  "/api/auth/line/callback",
]

// üÜï ‡∏Å‡∏≥‡∏´‡∏ô‡∏î API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå
const PROTECTED_API_PREFIXES = [
  "/api/admin",      // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin/staff
  "/api/user",       // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô login)
  "/api/backend",    // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backend
]

const JWT_SECRET = new TextEncoder().encode(process.env.JWT_SECRET)

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl

  // ‡∏õ‡∏•‡πà‡∏≠‡∏¢ static/_next/assets
  if (
    pathname.startsWith("/_next") ||
    pathname.startsWith("/favicon") ||
    pathname.startsWith("/public") ||
    pathname.startsWith("/assets") ||
    pathname.startsWith("/.well-known")
  ) return NextResponse.next()

  // ‡∏õ‡∏•‡πà‡∏≠‡∏¢ API ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞
  if (PUBLIC_API_PREFIXES.some((p) => pathname.startsWith(p))) {
    return NextResponse.next()
  }

  // üÜï ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  if (PROTECTED_API_PREFIXES.some((p) => pathname.startsWith(p))) {
    const token = req.cookies.get("session")?.value
    
    if (!token) {
      return NextResponse.json(
        { error: "Unauthorized", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö Token ‡∏´‡∏£‡∏∑‡∏≠ Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" },
        { status: 401 }
      )
    }

    try {
      const { payload } = await jwtVerify(token, JWT_SECRET, { algorithms: ["HS256"] })
      const userRole = payload.role as string

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API admin
      if (pathname.startsWith("/api/admin")) {
        if (userRole !== "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" && userRole !== "SuperAdmin") {
          return NextResponse.json(
            { error: "Forbidden", message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏ô‡∏µ‡πâ" },
            { status: 403 }
          )
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API user (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô login)
      if (pathname.startsWith("/api/user") && !pathname.startsWith("/api/user/login")) {
        if (userRole !== "user") {
          return NextResponse.json(
            { error: "Forbidden", message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á API ‡∏ô‡∏µ‡πâ" },
            { status: 403 }
          )
        }
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° user data ‡πÉ‡∏ô headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
      const requestHeaders = new Headers(req.headers)
      requestHeaders.set('x-user-id', payload.userId as string)
      requestHeaders.set('x-user-role', userRole)

      return NextResponse.next({
        request: {
          headers: requestHeaders,
        }
      })

    } catch (error) {
      console.error("üö® API JWT Verification failed:", error)
      return NextResponse.json(
        { error: "Unauthorized", message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏" },
        { status: 401 }
      )
    }
  }

  // ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏´‡∏ô‡πâ‡∏≤ public
  if (PUBLIC_PATHS.has(pathname)) {
    return NextResponse.next()
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ session
  const token = req.cookies.get("session")?.value
  if (!token) {
    const url = req.nextUrl.clone()
    url.pathname = "/401"  // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: redirect ‡πÑ‡∏õ 401 ‡πÅ‡∏ó‡∏ô
    return NextResponse.redirect(url)
  }

  try {
    // ‡∏ñ‡∏≠‡∏î‡∏£‡∏´‡∏±‡∏™ JWT ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π role
    const { payload } = await jwtVerify(token, JWT_SECRET, { algorithms: ["HS256"] })
    const userRole = payload.role as string
    
    console.log(`üîç User role: ${userRole}, accessing: ${pathname}`)
    
    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ï‡∏≤‡∏° role ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (pathname.startsWith("/‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà") || pathname.startsWith("/backend")) {
      // ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠ SuperAdmin
      if (userRole !== "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" && userRole !== "SuperAdmin") {
        console.log("‚ùå User trying to access staff area - showing 401")
        const url = req.nextUrl.clone()
        url.pathname = "/401"  // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ 401 ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ redirect
        return NextResponse.redirect(url)
      }
    } else if (pathname.startsWith("/front")) {
      // ‡∏´‡∏ô‡πâ‡∏≤ user - ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô user
      if (userRole !== "user") {
        console.log("‚ùå Staff trying to access user area - showing 401")
        const url = req.nextUrl.clone()
        url.pathname = "/401"  // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ 401 ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ redirect
        return NextResponse.redirect(url)
      }
    }
    
    // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Auto redirect ‡∏´‡∏•‡∏±‡∏á login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (pathname === "/" && token) {
      console.log(`üöÄ Auto redirecting ${userRole} to appropriate dashboard`)
      const url = req.nextUrl.clone()
      
      if (userRole === "‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà" || userRole === "SuperAdmin") {
        url.pathname = "/backend/dashboard"
      } else if (userRole === "user") {
        url.pathname = "/front/user-dashboard"
      }
      
      return NextResponse.redirect(url)
    }
    
    return NextResponse.next()
  } catch (error) {
    console.error("üö® JWT Verification failed:", error)
    const url = req.nextUrl.clone()
    url.pathname = "/401"  // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ 401 ‡πÄ‡∏°‡∏∑‡πà‡∏≠ JWT ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    return NextResponse.redirect(url)
  }
}

export const config = {
  matcher: [
    "/",                     // ‡πÄ‡∏û‡∏∑‡πà‡∏≠ auto redirect ‡∏´‡∏•‡∏±‡∏á login
    "/front/:path*",         // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡∏±‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    "/‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà/:path*",     // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà
    "/backend/:path*",       // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡πâ‡∏≤ backend
    "/api/:path*",           // üÜï ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô API endpoints ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  ],
}